<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements IUserRepository
{
    /**
     * @return array
     */
    public function getAllUsers(): array
    {
        return $this->getEntityManager()
                    ->getRepository(User::class)
                    ->createQueryBuilder('u')
                    ->orderBy('u.username', 'ASC')
                    ->getQuery()
                    ->getArrayResult();
    }

    /**
     * @param int $id
     * @return null|User
     */
    public function getUserByID(int $id)
    {
        return $this->getEntityManager()
                    ->getRepository(User::class)
                    ->createQueryBuilder('u')
                    ->where('u.id = :id')
                    ->setParameters([
                        ':id' => $id
                    ])->getQuery()
                      ->getOneOrNullResult();
    }

    /**
     * @param User $user
     * @param array $roles
     * @return bool
     */
    public function updateUserRoles(User $user, array $roles): bool
    {
        $em = $this->getEntityManager();
        $user->setRoles($roles);
        $em->getUnitOfWork()->scheduleForUpdate($user);

        if (true === $em->getUnitOfWork()->isScheduledForUpdate($user)) {
            $em->flush();
            return true;
        }

        return false;
    }

    /**
     * @param User $user
     * @param array $roles
     * @return bool
     */
    public function demoteUserRoles(User $user, array $roles): bool
    {
        $em = $this->getEntityManager();
        foreach ($roles as $role) {
            $user->removeRole($role);
        }

        $em->getUnitOfWork()->scheduleForUpdate($user);

        if (true === $em->getUnitOfWork()->isScheduledForUpdate($user)) {
            $em->flush();
            return true;
        }

        return false;
    }
}
