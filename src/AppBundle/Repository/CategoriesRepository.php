<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Categories;
use AppBundle\Entity\Comments;
use AppBundle\Entity\OrderedProducts;
use AppBundle\Entity\Product;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * CategoriesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoriesRepository extends EntityRepository implements ICategoriesRepository
{
    public function invokeFindByBuilder(): QueryBuilder
    {
        return $this->createQueryBuilder($this->getClassMetadata()->getTableName());
    }

    /**
     * @param string $name
     * @return null|object
     */
    public function findByCategoryName(string $name)
    {
        return $this->findOneBy(['name' => $name]);
    }

    /**
     * @param Categories $categories
     * @return bool
     */
    public function addCategory(Categories $categories): bool
    {
        $em = $this->getEntityManager();
        $em->persist($categories);

        if (true === $em->getUnitOfWork()->isScheduledForInsert($categories)) {
            $em->flush();
            return true;
        }

        return false;
    }

    /**
     * @return array
     */
    public function getAllCategoriesOnArray(): array
    {
        $query = $this->getEntityManager()
                      ->getRepository(Categories::class)
                      ->createQueryBuilder('c');

        return $query->getQuery()
                     ->getArrayResult();
    }

    /**
     * @param Categories $categories
     * @return bool
     */
    public function removeCategoryWithoutProducts(Categories $categories): bool
    {
        $em = $this->getEntityManager();
        $em->remove($categories);

        if (true === $em->getUnitOfWork()->isScheduledForDelete($categories)) {
            $em->flush();
            return true;
        }

        return false;
    }

    /**
     * @param Categories $categories
     * @param Product[] $product
     * @return bool
     */
    public function removeCategoryWithProducts(Categories $categories, array $product): bool
    {
        $em = $this->getEntityManager();

        foreach ($product as $p) {
            $em->remove($p);
        }
        $em->remove($categories);

        if (true === $em->getUnitOfWork()->isScheduledForDelete($categories)) {
            $em->flush();
            return true;
        }

        return false;
    }
}
