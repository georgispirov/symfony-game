<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Comments;
use AppBundle\Entity\Product;
use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * CommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentsRepository extends EntityRepository implements ICommentsRepository
{
    /**
     * @return QueryBuilder
     */
    public function getCommentsOnCertainUser(): QueryBuilder
    {
        // TODO: Implement getCommentsOnCertainUser() method.
    }

    /**
     * @param Product $product
     * @return array
     */
    public function getCommentsOnCertainProduct(Product $product): array
    {
        return $this->getEntityManager()
                    ->getRepository(Comments::class)
                    ->findBy([
                        'product' => $product
                    ], [
                        'votedDate' => 'DESC'
                    ]);
    }

    public function invokeFindByBuilder(): QueryBuilder
    {
        return $this->createQueryBuilder($this->getClassMetadata()->getTableName());
    }

    /**
     * @param Comments $comments
     * @param Product $product
     * @param User $user
     * @return bool
     */
    public function addCommentOnProduct(Comments $comments,
                                        Product $product,
                                        User $user): bool
    {
        $em = $this->getEntityManager();

        $comments->setUser($user);
        $comments->setProduct($product);
        $comments->setVotedDate(new \DateTime('now'));
        $em->persist($comments);

        if (true === $em->getUnitOfWork()->isScheduledForInsert($comments)) {
            $em->flush();
            return true;
        }

        return false;
    }

    /**
     * @param Comments $comments
     * @return bool
     */
    public function deleteComment(Comments $comments): bool
    {
        $em = $this->getEntityManager();
        $em->remove($comments);

        if (true === $em->getUnitOfWork()->isScheduledForDelete($comments)) {
            $em->flush();
            return true;
        }

        return false;
    }
}
