<?php

namespace AppBundle\Repository;

use AppBundle\Entity\OrderedProducts;
use AppBundle\Entity\Product;
use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * OrderedProductsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderedProductsRepository extends EntityRepository implements IOrderedProductsRepository
{
    /**
     * @param User $user
     * @return array
     */
    public function getOrderedProductsByUser(User $user): array
    {
        $query = $this->getEntityManager()
                      ->getRepository(OrderedProducts::class)
                      ->createQueryBuilder('op')
                      ->select('op.id as orderedProductID, pr.title AS Product, op.orderedDate, pr.id AS viewProductID,
                                      op.quantity AS Quantity, u.username AS User, op.orderedProductPrice AS Price')
                      ->join('op.user','u')
                      ->join('op.product', 'pr')
                      ->where('u = :user')
                      ->andWhere('op.quantity > 0')
                      ->setParameter(':user', $user)
                      ->getQuery();

        return $query->getArrayResult();
    }

    /**
     * @param User $user
     * @param Product $product
     * @return bool
     * @throws \Exception
     */
    public function addOrderedProduct(User $user, Product $product): bool
    {
        $em = $this->getEntityManager();
        $em->getUnitOfWork()->scheduleForUpdate($user);

        $orderedProduct = new OrderedProducts();

        $orderedProduct->setUser($user);
        $orderedProduct->setOrderedDate(new \DateTime('now'));
        $orderedProduct->setConfirmed(false);
        $orderedProduct->setQuantity(1);
        $orderedProduct->setProduct($product);
        $orderedProduct->setOrderedProductPrice($product->getPrice());

        $em->persist($orderedProduct);

        if (true === $em->getUnitOfWork()->isScheduledForInsert($orderedProduct)
            && true === $em->getUnitOfWork()->isScheduledForUpdate($user)) {
                $user->setTotalCheck($user->getTotalCheck() + $product->getPrice());
                $em->flush();
                return true;
        }

        return false;
    }

    /**
     * @param Product $product
     * @return OrderedProducts|null|object
     */
    public function findOrderedProductByProduct(Product $product)
    {
        return  $this->getEntityManager()
                     ->getRepository(OrderedProducts::class)
                     ->findOneBy([
                         'product' => $product
                     ]);
    }

    /**
     * @param OrderedProducts $orderedProducts
     * @param User $user
     * @param Product $product
     * @return bool
     */
    public function removeOrderedProduct(OrderedProducts $orderedProducts,
                                         User $user,
                                         Product $product): bool
    {
        $em = $this->getEntityManager();

        $em->getUnitOfWork()->scheduleForDelete($orderedProducts);
        $em->getUnitOfWork()->scheduleForUpdate($user);

        $em->remove($orderedProducts);

        $user->setTotalCheck($user->getTotalCheck() - $product->getPrice());

        if (true === $em->getUnitOfWork()->isScheduledForDelete($orderedProducts)
            && true === $em->getUnitOfWork()->isScheduledForUpdate($user))
        {
                $em->flush();
                return true;
        }

        return false;
    }

    /**
     * @param OrderedProducts $orderedProduct
     * @param Product $product
     * @return bool
     */
    public function increaseQuantity(OrderedProducts $orderedProduct, Product $product): bool
    {
        $em = $this->getEntityManager();

        $em->getUnitOfWork()->scheduleForUpdate($orderedProduct);
        $user = $orderedProduct->getUser();

        $user->setTotalCheck($user->getTotalCheck() + $product->getPrice());

        $quantity      = $orderedProduct->getQuantity() + 1;
        $increasePrice = $orderedProduct->getOrderedProductPrice() + $product->getPrice();

        $orderedProduct->setQuantity($quantity);
        $orderedProduct->setOrderedProductPrice($increasePrice);
        $orderedProduct->setOrderedDate(new \DateTime('now'));

        $em->getUnitOfWork()->scheduleForUpdate($orderedProduct);

        if (true === $em->getUnitOfWork()->isScheduledForUpdate($orderedProduct)) {
            $em->flush();
            return true;
        }

        return false;
    }

    /**
     * @param User $user
     * @param Product $product
     * @return OrderedProducts|null|object
     */
    public function findOrderedProductFromUserByID(User $user, Product $product)
    {
        return $this->getEntityManager()
                    ->getRepository(OrderedProducts::class)
                    ->findOneBy([
                        'user'      => $user,
                        'product'   => $product
                    ]);
    }

    public function findOrderedProductByID(int $id)
    {
        return $this->getEntityManager()
                     ->getRepository(OrderedProducts::class)
                     ->findOneBy([
                         'id' => $id
                     ]);
    }

    /**
     * @param OrderedProducts $orderedProduct
     * @param Product $product
     * @param User $user
     * @return bool
     */
    public function decreaseQuantity(OrderedProducts $orderedProduct,
                                     Product $product,
                                     User $user): bool
    {
        $em = $this->getEntityManager();

        $em->getUnitOfWork()->scheduleForUpdate($orderedProduct);
        $em->getUnitOfWork()->scheduleForUpdate($user);

        $orderedProduct->setQuantity($orderedProduct->getQuantity() - 1);
        $orderedProduct->setOrderedProductPrice($orderedProduct->getOrderedProductPrice() - $product->getPrice());

        $user->setTotalCheck($user->getTotalCheck() - $product->getPrice());

        if (true === $em->getUnitOfWork()->isScheduledForUpdate($orderedProduct) &&
            true === $em->getUnitOfWork()->isScheduledForUpdate($user))
        {
            $em->flush();
            return true;
        }

        return false;
    }

    /**
     * @return float
     */
    public function getCheckoutFromAllProducts(): float
    {
        $query = $this->getEntityManager()
                      ->getRepository(OrderedProducts::class)
                      ->createQueryBuilder('op')
                      ->select('SUM (op.orderedProductPrice)');

        return $query->getQuery()
                     ->getSingleScalarResult();
    }
}
