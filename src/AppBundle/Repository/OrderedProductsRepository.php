<?php

namespace AppBundle\Repository;

use AppBundle\Entity\OrderedProducts;
use AppBundle\Entity\Product;
use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * OrderedProductsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderedProductsRepository extends EntityRepository implements IOrderedProductsRepository
{
    /**
     * @param User $user
     * @return array
     */
    public function getOrderedProductsByUser(User $user): array
    {
        $query = $this->getEntityManager()
                      ->getRepository(OrderedProducts::class)
                      ->createQueryBuilder('op')
                      ->select('op.id as orderedProductID, pr.title AS Product, op.orderedDate, op.orderedProductPrice AS Price, 
                                      op.confirmed AS Confirmed, u.username AS User')
                      ->join('op.user','u')
                      ->join('op.product', 'pr')
                      ->where('u = :user')
                      ->setParameter(':user', $user)
                      ->getQuery();

        return $query->getArrayResult();
    }

    /**
     * @param User $user
     * @param Product $product
     * @return bool
     * @throws \Exception
     */
    public function addOrderedProduct(User $user, Product $product): bool
    {
        $em = $this->getEntityManager();

        $orderedProduct = new OrderedProducts();
        $orderedProduct->setUser($user);
        $orderedProduct->setOrderedDate(new \DateTime('now'));
        $orderedProduct->setConfirmed(false);
        $orderedProduct->setProduct($product);
        $orderedProduct->setOrderedProductPrice($product->getPrice());

        $em->persist($orderedProduct);
        if (true === $em->getUnitOfWork()->isEntityScheduled($orderedProduct)) {
            $userMoney = $user->getMoney() - $product->getPrice();
            $em->flush();
            $user->setMoney($userMoney);
            $em->persist($user);
            $em->flush();
            return true;
        }
        return false;
    }

    /**
     * @param int $id
     * @return mixed
     */
    public function findOrderedProductByID(int $id)
    {
        return  $this->getEntityManager()
                     ->getRepository(OrderedProducts::class)
                     ->findOneBy(['id' => $id]);
    }

    /**
     * @param OrderedProducts $product
     * @return bool
     */
    public function removeOrderedProduct(OrderedProducts $product): bool
    {
        $em = $this->getEntityManager();
        $em->remove($product);

        if (true === $em->getUnitOfWork()->isScheduledForDelete($product)) {
            $em->flush();
            return true;
        }

        return false;
    }

    /**
     * @param OrderedProducts $orderedProduct
     * @return bool
     */
    public function increaseQuantity(OrderedProducts $orderedProduct): bool
    {
        $em = $this->getEntityManager();
        $em->persist($orderedProduct);

        if (true === $em->getUnitOfWork()->isScheduledForUpdate($orderedProduct)) {
            $quantity = $orderedProduct->getQuantity() + 1;
            $orderedProduct->setQuantity($quantity);
            $em->flush();
            return true;
        }

        return false;
    }
}
